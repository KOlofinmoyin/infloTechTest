{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2024-02-10T16:11:34.599Z",
    "end": "2024-02-10T16:11:51.601Z",
    "duration": 17002,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d5700360-214b-43ac-920a-7eaf92160692",
      "title": "",
      "fullFile": "/Users/kolofinmoyin/Documents/Projects/TechTest/UserManagement.Web/test/UserListView.js",
      "file": "/test/UserListView.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a6f5a319-0254-444e-be61-103cfddaca2c",
          "title": "User Management Page",
          "fullFile": "/Users/kolofinmoyin/Documents/Projects/TechTest/UserManagement.Web/test/UserListView.js",
          "file": "/test/UserListView.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Management Page\"",
              "fullTitle": "User Management Page \"before each\" hook in \"User Management Page\"",
              "timedOut": false,
              "duration": 3451,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.manage().setTimeouts({ implicit: 5000 });\n//Maximize current window\nawait driver.manage().window().maximize();\nconst baseUrl = \"https://localhost:7084/users\";\nawait driver.get(baseUrl);",
              "err": {},
              "uuid": "2869ae2d-32e0-4e2c-b8e8-cb9e08514b16",
              "parentUUID": "a6f5a319-0254-444e-be61-103cfddaca2c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Management Page\"",
              "fullTitle": "User Management Page \"after each\" hook in \"User Management Page\"",
              "timedOut": false,
              "duration": 60,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "8fbec3f8-b6fc-45df-bcb5-7df35a729f0f",
              "parentUUID": "a6f5a319-0254-444e-be61-103cfddaca2c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Should display ALL users when clicking the 'Show All' button",
              "fullTitle": "User Management Page Should display ALL users when clicking the 'Show All' button",
              "timedOut": false,
              "duration": 123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { expect } = await import(\"chai\");\n//const baseUrl = \"https://localhost:7084/users\";\n//await driver.get(baseUrl);\nconst element = await driver.findElement(By.xpath(\"//a[contains(text(), 'Show All')]\"));\nawait driver.executeScript(\"arguments[0].click();\", element);\n// Locate the <tr> element with 'Active Only' attributes using XPath\nconst activeElement = await driver.findElement(By.xpath(\"//tr[td[contains(text(), 'Benjamin Franklin')]]\"));\n// Assert that the Active user is present\nexpect(await activeElement.isDisplayed()).to.be.true;\n// Locate the <tr> element with 'Non Active' attributes using XPath\nconst inActiveElement = await driver.findElement(By.xpath(\"//tr[td[contains(text(), 'Castor')]]\"));\n// Assert that the 'Non Active' user is present\nexpect(await inActiveElement.isDisplayed()).to.be.true;",
              "err": {},
              "uuid": "2ac15860-17bf-458d-a484-bc2a9a55e21f",
              "parentUUID": "a6f5a319-0254-444e-be61-103cfddaca2c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should filter out non-active records when clicking 'Active Only' button",
              "fullTitle": "User Management Page Should filter out non-active records when clicking 'Active Only' button",
              "timedOut": false,
              "duration": 10094,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { expect } = await import(\"chai\");\n\n// Click on the 'Active Only' button\nconst activeOnlyButton = await driver.findElement(By.xpath(\"//a[contains(text(), 'Active Only')]\"));\nawait driver.executeScript(\"arguments[0].click();\", activeOnlyButton);\n// Wait for the page to reload and data to update\n// Locate all elements in the 'Active Account' column\nconst activeAccountElements = await driver.findElements(By.xpath(\"//td[contains(@class, 'active-account')]\"));\n// Verify that all elements in the 'Active Account' column have the text 'Yes'\nfor (const element of activeAccountElements) {\n    const text = await element.getText();\n    expect(text).toBe(\"Yes\");\n}\n// Ensure that there are no elements with the text 'No' in the 'Active Account' column\nconst inactiveAccountElements = await driver.findElements(By.xpath(\"//td[contains(@class, 'active-account') and contains(text(), 'No')]\"));\nexpect(inactiveAccountElements.length).to.equal(0);",
              "err": {},
              "uuid": "9f77d2ce-7d27-4c60-956c-46015a284921",
              "parentUUID": "a6f5a319-0254-444e-be61-103cfddaca2c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2ac15860-17bf-458d-a484-bc2a9a55e21f",
            "9f77d2ce-7d27-4c60-956c-46015a284921"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10217,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}