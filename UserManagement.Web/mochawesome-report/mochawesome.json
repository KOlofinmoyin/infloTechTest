{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 1,
    "pending": 0,
    "failures": 1,
    "start": "2024-02-09T12:12:53.454Z",
    "end": "2024-02-09T12:12:56.697Z",
    "duration": 3243,
    "testsRegistered": 2,
    "passPercent": 50,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "277f6bd2-df93-498a-ae07-3cc7aad67f92",
      "title": "",
      "fullFile": "/Users/kolofinmoyin/Documents/Projects/TechTest/UserManagement.Web/test/UserListView.js",
      "file": "/test/UserListView.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7a925214-c747-425a-9ce2-1f624b8e9968",
          "title": "User Management Page",
          "fullFile": "/Users/kolofinmoyin/Documents/Projects/TechTest/UserManagement.Web/test/UserListView.js",
          "file": "/test/UserListView.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Management Page\"",
              "fullTitle": "User Management Page \"before each\" hook in \"User Management Page\"",
              "timedOut": false,
              "duration": 1196,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.manage().setTimeouts({ implicit: 5000 }); // Adjust the timeout if necessary",
              "err": {},
              "uuid": "d854655a-a045-4cc0-8636-ed6f7cb3f551",
              "parentUUID": "7a925214-c747-425a-9ce2-1f624b8e9968",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Management Page\"",
              "fullTitle": "User Management Page \"after each\" hook in \"User Management Page\"",
              "timedOut": false,
              "duration": 53,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "fe1542e6-fb19-4b67-9da3-7af072e2c19e",
              "parentUUID": "7a925214-c747-425a-9ce2-1f624b8e9968",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Customer can 'Show All' users in db",
              "fullTitle": "User Management Page Customer can 'Show All' users in db",
              "timedOut": false,
              "duration": 249,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { expect } = await import(\"chai\");\nconst baseUrl = \"https://localhost:7084/users\";\nawait driver.get(baseUrl);\nconst element = await driver.findElement(By.xpath(\"//a[contains(text(), 'Show All')]\"));\nawait driver.executeScript(\"arguments[0].click();\", element);\n// Locate the <tr> element with 'Active Only' attributes using XPath\nconst activeElement = await driver.findElement(By.xpath(\"//tr[td[contains(text(), 'Benjamin Franklin')]]\"));\n// Assert that the <tr> element is present\nexpect(await activeElement.isDisplayed()).to.be.true;\n// Locate the <tr> element with 'Non Active' attributes using XPath\nconst inActiveElement = await driver.findElement(By.xpath(\"//tr[td[contains(text(), 'Castor')]]\"));\n// Assert that the <tr> element is present\nexpect(await inActiveElement.isDisplayed()).to.be.true;",
              "err": {},
              "uuid": "364bdfd6-7292-43d8-bfde-ac401417ac68",
              "parentUUID": "7a925214-c747-425a-9ce2-1f624b8e9968",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Customer can view 'Active Only' users in db",
              "fullTitle": "User Management Page Customer can view 'Active Only' users in db",
              "timedOut": false,
              "duration": 190,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const { expect } = await import(\"chai\");\nconst baseUrl = \"https://localhost:7084/users\";\nawait driver.get(baseUrl);\nconst element = await driver.findElement(By.xpath(\"//a[contains(text(), 'Active Only')]\"));\nawait driver.executeScript(\"arguments[0].click();\", element);\n// Locate the <tr> element with 'Non Active attributes using XPath\nconst inActiveElement = await driver.findElement(By.xpath(\"//tr[td[contains(text(), 'Castor')]]\"));\n// Assert that the <tr> element is present\nexpect(await inActiveElement.isDisplayed()).to.be.false;",
              "err": {
                "message": "AssertionError: expected true to be false",
                "estack": "AssertionError: expected true to be false\n    at Context.<anonymous> (test/UserListView.js:50:58)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "6d3b01f6-f92e-4512-b68e-4c3ccc50fcd5",
              "parentUUID": "7a925214-c747-425a-9ce2-1f624b8e9968",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "364bdfd6-7292-43d8-bfde-ac401417ac68"
          ],
          "failures": [
            "6d3b01f6-f92e-4512-b68e-4c3ccc50fcd5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 439,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}